{"version":3,"sources":["views/notifications/toasts/Toasts.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js"],"names":["ExampleToast","useState","toast","addToast","toaster","useRef","exampleToast","title","closeButton","className","width","height","xmlns","preserveAspectRatio","focusable","role","fill","onClick","ref","push","placement","Toasts","xs","name","href","autohide","visible","type","color","size","component","CButton","white","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","Array","from","test","_slicedToArray","arr","i","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","value","length","err","unsupportedIterableToArray","TypeError","_arrayLikeToArray","len","arr2"],"mappings":"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","file":"static/js/13.88a558a2.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CButton,\r\n  CRow,\r\n  CCol,\r\n  CToast,\r\n  CToastBody,\r\n  CToastClose,\r\n  CToastHeader,\r\n  CToaster,\r\n} from '@coreui/react'\r\nimport { DocsCallout, DocsExample } from 'src/components'\r\n\r\nconst ExampleToast = () => {\r\n  const [toast, addToast] = useState(0)\r\n  const toaster = useRef()\r\n  const exampleToast = (\r\n    <CToast title=\"CoreUI for React.js\">\r\n      <CToastHeader closeButton>\r\n        <svg\r\n          className=\"rounded me-2\"\r\n          width=\"20\"\r\n          height=\"20\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          preserveAspectRatio=\"xMidYMid slice\"\r\n          focusable=\"false\"\r\n          role=\"img\"\r\n        >\r\n          <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\r\n        </svg>\r\n        <strong className=\"me-auto\">CoreUI for React.js</strong>\r\n        <small>7 min ago</small>\r\n      </CToastHeader>\r\n      <CToastBody>Hello, world! This is a toast message.</CToastBody>\r\n    </CToast>\r\n  )\r\n  return (\r\n    <>\r\n      <CButton onClick={() => addToast(exampleToast)}>Send a toast</CButton>\r\n      <CToaster ref={toaster} push={toast} placement=\"top-end\" />\r\n    </>\r\n  )\r\n}\r\n\r\nconst Toasts = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <DocsCallout name=\"Toast\" href=\"components/toast\" />\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Toast</strong> <small>Basic</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-medium-emphasis small\">\r\n              Toasts are as flexible as you need and have very little required markup. At a minimum,\r\n              we require a single element to contain your “toasted” content and strongly encourage a\r\n              dismiss button.\r\n            </p>\r\n            <DocsExample href=\"components/toast\">\r\n              <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\r\n                <CToastHeader closeButton>\r\n                  <svg\r\n                    className=\"rounded me-2\"\r\n                    width=\"20\"\r\n                    height=\"20\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    preserveAspectRatio=\"xMidYMid slice\"\r\n                    focusable=\"false\"\r\n                    role=\"img\"\r\n                  >\r\n                    <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\r\n                  </svg>\r\n                  <strong className=\"me-auto\">CoreUI for React.js</strong>\r\n                  <small>7 min ago</small>\r\n                </CToastHeader>\r\n                <CToastBody>Hello, world! This is a toast message.</CToastBody>\r\n              </CToast>\r\n            </DocsExample>\r\n            <DocsExample href=\"components/toast\">{ExampleToast()}</DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Toast</strong> <small>Translucent</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-medium-emphasis small\">\r\n              Toasts are slightly translucent to blend in with what&#39;s below them.\r\n            </p>\r\n            <DocsExample href=\"components/toast#translucent\">\r\n              <div className=\"bg-dark p-3\">\r\n                <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\r\n                  <CToastHeader closeButton>\r\n                    <svg\r\n                      className=\"rounded me-2\"\r\n                      width=\"20\"\r\n                      height=\"20\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      preserveAspectRatio=\"xMidYMid slice\"\r\n                      focusable=\"false\"\r\n                      role=\"img\"\r\n                    >\r\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\r\n                    </svg>\r\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\r\n                    <small>7 min ago</small>\r\n                  </CToastHeader>\r\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\r\n                </CToast>\r\n              </div>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Toast</strong> <small>Stacking</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-medium-emphasis small\">\r\n              You can stack toasts by wrapping them in a toast container, which will vertically add\r\n              some spacing.\r\n            </p>\r\n            <DocsExample href=\"components/toast#stacking\">\r\n              <CToaster>\r\n                <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\r\n                  <CToastHeader closeButton>\r\n                    <svg\r\n                      className=\"rounded me-2\"\r\n                      width=\"20\"\r\n                      height=\"20\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      preserveAspectRatio=\"xMidYMid slice\"\r\n                      focusable=\"false\"\r\n                      role=\"img\"\r\n                    >\r\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\r\n                    </svg>\r\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\r\n                    <small>7 min ago</small>\r\n                  </CToastHeader>\r\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\r\n                </CToast>\r\n                <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\r\n                  <CToastHeader closeButton>\r\n                    <svg\r\n                      className=\"rounded me-2\"\r\n                      width=\"20\"\r\n                      height=\"20\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      preserveAspectRatio=\"xMidYMid slice\"\r\n                      focusable=\"false\"\r\n                      role=\"img\"\r\n                    >\r\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\r\n                    </svg>\r\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\r\n                    <small>7 min ago</small>\r\n                  </CToastHeader>\r\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\r\n                </CToast>\r\n              </CToaster>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Toast</strong> <small>Custom content</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-medium-emphasis small\">\r\n              Customize your toasts by removing sub-components, tweaking them with{' '}\r\n              <a href=\"https://coreui.io/docs/4.0/utilities/api\">utilities</a>, or by adding your\r\n              own markup. Here we&#39;ve created a simpler toast by removing the default{' '}\r\n              <code>&lt;CToastHeader&gt;</code>, adding a custom hide icon from{' '}\r\n              <a href=\"https://icons.coreui.io\">CoreUI Icons</a>, and using some{' '}\r\n              <a href=\"https://coreui.io/docs/4.0/utilities/flex\">flexbox utilities</a> to adjust\r\n              the layout.\r\n            </p>\r\n            <DocsExample href=\"components/toast#custom-content\">\r\n              <CToast autohide={false} className=\"align-items-center\" visible={true}>\r\n                <div className=\"d-flex\">\r\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\r\n                  <CToastClose className=\"me-2 m-auto\" />\r\n                </div>\r\n              </CToast>\r\n            </DocsExample>\r\n            <p className=\"text-medium-emphasis small\">\r\n              Alternatively, you can also add additional controls and components to toasts.\r\n            </p>\r\n            <DocsExample href=\"components/toast#custom-content\">\r\n              <CToast autohide={false} visible={true}>\r\n                <CToastBody>\r\n                  Hello, world! This is a toast message.\r\n                  <div className=\"mt-2 pt-2 border-top\">\r\n                    <CButton type=\"button\" color=\"primary\" size=\"sm\">\r\n                      Take action\r\n                    </CButton>\r\n                    <CToastClose component={CButton} color=\"secondary\" size=\"sm\" className=\"ms-1\">\r\n                      Close\r\n                    </CToastClose>\r\n                  </div>\r\n                </CToastBody>\r\n              </CToast>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Toast</strong> <small>Custom content</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-medium-emphasis small\">\r\n              Building on the above example, you can create different toast color schemes with our{' '}\r\n              <a href=\"https://coreui.io/docs/4.0/utilities/colors\">color</a> and{' '}\r\n              <a href=\"https://coreui.io/docs/4.0//utilities/background\">background</a> utilities.\r\n              Here we&#39;ve set <code>color=&#34;primary&#34;</code> and added{' '}\r\n              <code>.text-white</code> class to the <code>&lt;Ctoast&gt;</code>, and then set{' '}\r\n              <code>white</code> property to our close button. For a crisp edge, we remove the\r\n              default border with <code>.border-0</code>.\r\n            </p>\r\n            <DocsExample href=\"components/toast#color-schemes\">\r\n              <CToast\r\n                autohide={false}\r\n                color=\"primary\"\r\n                className=\"text-white align-items-center\"\r\n                visible={true}\r\n              >\r\n                <div className=\"d-flex\">\r\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\r\n                  <CToastClose className=\"me-2 m-auto\" white />\r\n                </div>\r\n              </CToast>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Toasts\r\n","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}"],"sourceRoot":""}